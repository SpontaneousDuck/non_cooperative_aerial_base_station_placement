Metadata-Version: 2.4
Name: uav_placement
Version: 0.1.0
Summary: Non-cooperative Aerial Base Station Placement via Stochastic Optimization
Home-page: https://github.com/SpontaneousDuck/non_cooperative_aerial_base_station_placement
Author: Daniel Romero
Author-email: daniel.romero@uia.no
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: LICENSE.txt
Requires-Dist: numpy>=1.20.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: matplotlib>=3.3.0
Requires-Dist: scikit-learn>=1.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.0; extra == "dev"
Requires-Dist: black>=21.0; extra == "dev"
Requires-Dist: flake8>=3.8; extra == "dev"
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: provides-extra
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary



# Non-cooperative Aerial Base Station Placement via Stochastic Optimization

This repository contains Python implementations of algorithms for optimizing the placement of aerial base stations (UAVs) to maximize utility for mobile users in a non-cooperative setting.

**Original Paper:** ["Non-cooperative Aerial Base Station Placement via Stochastic Optimization"](https://arxiv.org/abs/1905.03988) by Daniel Romero and Geert Leus.

**Video:** https://www.youtube.com/watch?v=ZNQiVQ3TtGI

## Features

- **Python Implementation**: Converted from MATLAB with simplified, modern Python code
- **Multiple Optimization Methods**: Stochastic gradient descent and k-means-based approaches
- **Flexible Utility Functions**: Sigmoid and leaky ReLU utility functions
- **Realistic Channel Models**: Free space propagation with configurable parameters
- **Easy-to-Use API**: Simple interface for external programs
- **Command-Line Interface**: Run optimizations from the command line
- **Visualization**: Built-in plotting and result visualization

## Installation

```bash
# Clone the repository
git clone https://github.com/SpontaneousDuck/non_cooperative_aerial_base_station_placement.git
cd non_cooperative_aerial_base_station_placement

# Install dependencies
pip install -r requirements.txt

# Install the package
pip install -e .
```

## Quick Start

### Python API

```python
from uav_placement import UAVPlacementOptimizer

# Simple optimization
optimizer = UAVPlacementOptimizer()
results = optimizer.optimize(
    num_base_stations=3,
    num_mobile_users=50,
    region_size=7.0,
    num_iterations=100
)

print(f"Final utility: {results['results']['final_utility']}")
print("Optimal positions:", results['results']['final_bs_positions'])

# Save results and plot
optimizer.save_results('results.json')
optimizer.plot_results(save_path='optimization.png')
```

### Command Line Interface

```bash
# Basic optimization
uav-placement --num-bs 3 --num-users 50 --iterations 100

# Advanced parameters
uav-placement --num-bs 5 --num-users 100 --method stochastic \
    --utility sigmoid --step-size 2.0 --batch-size 20 \
    --output results.json --plot optimization.png

# K-means optimization
uav-placement --num-bs 3 --num-users 50 --method kmeans \
    --iterations 50 --output kmeans_results.json
```

## Algorithm Overview

The package implements non-cooperative optimization where each aerial base station independently optimizes its position based on utility feedback from mobile users. Two main approaches are supported:

1. **Stochastic Gradient Descent**: Base stations use gradients of user utility functions to update positions
2. **K-means Clustering**: Base stations move toward centroids of users they serve

### Key Components

- **Mobile Users**: Entities with utility functions based on received signal power
- **Aerial Base Stations**: Flying base stations that can adjust their positions
- **Channel Model**: Free space propagation with realistic parameters
- **Placement Simulator**: Orchestrates the optimization process

## Examples

See `example.py` for a complete usage example:

```bash
python example.py
```

## API Reference

### Main Classes

- `UAVPlacementOptimizer`: High-level interface for optimization
- `MobileUser`: Represents mobile users with utility functions
- `AerialBaseStation`: Base class for aerial base stations
- `StochasticAerialBaseStation`: Gradient-based base station
- `KmeansAerialBaseStation`: K-means-based base station
- `Channel`: Communication channel models
- `PlacementSimulator`: Main simulation engine

### Key Parameters

- `num_base_stations`: Number of aerial base stations
- `num_mobile_users`: Number of mobile users in the region
- `region_size`: Size of the square deployment region (km)
- `optimization_method`: 'stochastic' or 'kmeans'
- `utility_function`: 'sigmoid' or 'leakyRelu'
- `num_iterations`: Number of optimization steps
- `step_size`: Learning rate for gradient descent

## Testing

Run the test suite:

```bash
pytest uav_placement/tests/
```

## Citation

If you use this code in your research, please cite:

```bibtex
@article{romero2019non,
  title={Non-cooperative aerial base station placement via stochastic optimization},
  author={Romero, Daniel and Leus, Geert},
  journal={IEEE Transactions on Wireless Communications},
  year={2019},
  publisher={IEEE}
}
```

## License

This project is licensed under the MIT License - see the LICENSE file for details.
